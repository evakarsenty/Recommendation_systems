# -*- coding: utf-8 -*-
"""

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x57RwxJqwjskB89WxNyuZbGwUtUUn05w
"""

import numpy as np
import pandas as pd
import scipy
import scipy.sparse
import sklearn
from sklearn.preprocessing import OneHotEncoder

np.random.seed(0)

users_doc = pd.read_csv("user_song.csv")
test_doc = pd.read_csv("test.csv")
users_doc2 = pd.read_csv("user_song.csv")
test_doc2 = pd.read_csv("test.csv")

id_unique = users_doc['user_id'].unique()
id_unique_song = users_doc['song_id'].unique()

nb_users = users_doc["user_id"].nunique()
nb_songs = users_doc["song_id"].nunique()

users_id_dict ={}
songs_id_dict={}
count = 0
counter = 0
for id in id_unique:
  users_id_dict[id] =  count
  count+=1

for song in id_unique_song:
  songs_id_dict[song] = counter
  counter +=1

cols = nb_users
rows= nb_songs
R = np.zeros((rows, cols))

for row in users_doc.index:
    R[songs_id_dict.get(users_doc.loc[row]["song_id"])][users_id_dict.get(users_doc.loc[row]["user_id"])] = users_doc.loc[row]["weight"]

"""F4:"""

U, S, Vt = np.linalg.svd(R, full_matrices=False)
K = 50
R_approx = U[:, :K] @ np.diag(S[:K]) @ Vt[:K, :]

learning_rate = 0.001
num_iterations = 400
mask = R != 0
for _ in range(num_iterations):
    #print(_)
    # Calculate the gradient of the loss function (squared sum of errors)
    gradient = 2 * (R - R_approx)
    # Update the approximated matrix using gradient descent
    R_approx += learning_rate * gradient

f4 = np.sum(np.square(R - R_approx))
#print("Value of f4 function:", f4)

pairs = [(row.user_id, row.song_id) for row in test_doc.itertuples()]

values = []

for row in test_doc.index:
    value=R_approx[(songs_id_dict.get(test_doc.loc[row]["song_id"]))][(users_id_dict.get(test_doc.loc[row]["user_id"]))]
    values.append((test_doc.loc[row]["user_id"],test_doc.loc[row]["song_id"],value))

result_df = pd.DataFrame(values, columns=['user_id', 'song_id', 'weight'])
result_df['weight'] = result_df['weight'].clip(lower=0)
result_df.to_csv('task4.csv', index=False)
